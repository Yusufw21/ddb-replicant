import { useState, useEffect } from "react";
import { X } from "lucide-react";

export default function SyllabusEditFull() {
  const teachers = [
    "–ß–æ–Ω–º–∞—Ö–º–∞–¥–∑–æ–¥–∞ –ò",
    "–†–∞—Ö–∏–º–æ–≤ –ú",
    "–ò–∑–∑–∞—Ç—É–ª–æ–µ–≤–∞ –§",
    "–ê—Å—Ç–∞–Ω–∞–∫—É–ª–æ–≤ –•",
    "–®–∏—Ä–∏–Ω–æ–≤ –ù",
    "–ì—É–ª–æ–≤ –®",
    "–ì—É–ª–æ–≤–∞ –ú",
    "–ú—É—Å–∞–≤–∏—Ä–æ–≤–∞ –†",
    "–•–∞–∫–∏–º–æ–≤ –ê",
    "–ß–æ—Ä—à–∞–Ω–±–∏–µ–≤ –ù",
    "–ú—É—Ö–∞–º–∞–¥–∞–∑–∏–∑–∏ –ú",
    "–ò–±—Ä–∞–≥–∏–º–æ–≤ –û",
    "–°–∞–π–¥–∞—Ö–º–∞–¥–∑–æ–¥–∞ –ò",
    "–ê–º–∏–Ω–æ–≤ –°",
    "–ì–∞—é—Ä–æ–≤ –ú",
    "–ö—É—Ä–±–æ–Ω–æ–≤–∞ –ó",
    "–•–∞—Å–∞–Ω–æ–≤ –î",
    "–ú–∞—Ö–º–∞–¥–∞–ª–∏–µ–≤ –•",
    "–ê–±–¥—É—Ä–∞—Ö–∏–º–æ–≤ –ê",
    "–†–∞—Ö–∏–º–∑–æ–¥–∞ –®",
    "–¢–∏–ª–ª–æ–µ–≤ –®",
    "–ê–±–¥—É–ª—Ö–∞–∫–æ–≤ –ú",
    "–î–∞–≤–ª–∞—Ç–æ–≤ –•",
    "–§–∞—Ç—Ç–∏–¥–∏–Ω–æ–≤ –†",
    "–•–∞–±–∏–±—É–ª–ª–æ–∑–æ–¥–∞ –ö",
    "–†–∞—á–∞–±–∑–æ–¥–∞ –ù",
    "–ù–∞–∏–º–∑–æ–¥–∞ –ù",
    "–ê–±–¥—É–ª–ª–æ–µ–≤ –¢",
    "–ò–±–æ–¥–æ–≤ –ú",
    "–ö—É—Ä–±–æ–Ω–æ–≤ –§",
    "–•—É–¥–æ–π–Ω–∞–∑–∞—Ä–æ–≤ –†",
    "–ë–∞—Ö–æ–¥—É—Ä–æ–≤ –§",
    "–ö—É–≤–≤–∞—Ç–æ–≤–∞ –°",
    "–Æ—Å—É–ø–æ–≤ –°",
    "–ù—É—Ä–∞–ª–∏–µ–≤–∞ –®",
    "–†–∞—Å—É–ª–æ–≤–∞ –ù",
    "–ö–∞—Ä–∏–º–æ–≤–∞ –ú",
    "–ù–∞–∑–∞—Ä–æ–≤ –ú",
    "–•—É—Å–µ–π–Ω–æ–≤ –ó",
    "–†–∏–∑–æ–º–æ–≤–∞ –ó",
    "–ì—É–ª–æ–≤–∞ –ì",
    "–°–∞–º–∞–¥–æ–≤ –§",
    "–ö—É—Ä–±–æ–Ω–∞–∑–∞—Ä–æ–≤ –°",
    "–ú—É—Ä–æ–¥–æ–≤ –ë",
    "–ë–æ–±–æ–µ–≤–∞ –®",
    "–ê–±–¥—É–ª–ª–æ–µ–≤ –°",
    "–ù–µ–º–∞—Ç—É–ª–ª–æ–µ–≤ –û",
    "–ó–∞—Ä–∏–ø–æ–≤ –ú",
    "–ö–æ–¥–∏—Ä–∑–æ–¥–∞ –ë",
    "–ú—É—Ö—Å–∏–¥–¥–∏–Ω–æ–≤–∞ –ò",
    "–ò—Å–º–æ–∏–ª–æ–≤ –ê",
    "–í–∞–ª–∏–µ–≤ –†",
    "–ì—É–ª–æ–≤ –°",
    "–ú–∞—Ö–º–∞–¥—É–ª–ª–æ–µ–≤–∞ –•",
    "–ú–µ–Ω–≥–∏–ª–∏–µ–≤–∞ –ú",
    "–°–∞—Ç—Ç–æ—Ä–æ–≤ –§",
    "–†–æ–∑–∏–∫–æ–≤–∞ –§",
    "–§–∞–∫–µ—Ä–æ–≤ –ì",
    "–°–∞–∏–¥–æ–≤ –°",
    "–ê–∑–∏–∑–æ–≤–∞ –ü",
    "–ê–±–¥—É—Ä–∞—Ö–∏–º–æ–≤–∞ –°",
    "–ê–±–¥—É—Ä–æ–∑–∏–∫–æ–≤ –≠",
    "–ê–±–¥—É—Å–∞–º–∞–¥–∑–æ–¥–∞ –ê",
    "–¢–∞–≥–æ–π–º—É—Ä–æ–¥–æ–≤ –ê",
    "–ê–±–¥—É—Å–∞–ª–æ–º–∑–æ–¥–∞ –ê",
    "–ü–∏—Ä–æ–≤ –ê",
    "–í–∞–ª–∏–µ–≤–∞ –®",
    "–¢–µ—à–∞–ª–∏–µ–≤ –ú",
    "–ú–∏—Ä–∑–æ–º—É—Ä–æ–¥–æ–≤ –°",
    "–ë–æ–±–æ–∫—É–ª–æ–≤ –ú",
    "–†–∞—á–∞–±–∞–ª–∏–µ–≤ –°",
    "–†–∞–º–∞–∑–æ–Ω–∏ –ò",
    "–®–∞—Ä–∏–ø–æ–≤–∞ –ú",
    "–ú–∏—Ä–∑–æ—Ä–∞—Ö–∏–º–æ–≤ –ú",
    "–°–∞—ä–¥—É–ª–ª–æ–µ–≤–∞ –ù",
    "–®—É–∫—É—Ä–æ–≤ –ß",
    "–ó–æ–∫–∏—Ä–æ–≤ –®",
  ];

  const [subjects, setSubjects] = useState({});
  const [files, setFiles] = useState({});
  const [uploadStatus, setUploadStatus] = useState({});
  const [searchTerm, setSearchTerm] = useState("");
  const [filteredTeachers, setFilteredTeachers] = useState(teachers);
  const [syllabiList, setSyllabiList] = useState([]); // ‚Üê –≤—Å–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Å–∏–ª–ª–∞–±—É—Å—ã
  const [isChecking, setIsChecking] = useState(true);

  useEffect(() => {
    async function checkAuth() {
      try {
        const response = await fetch("/api/check", {
          credentials: "include",
        });
        const result = await response.json();

        if (!result.authenticated) {
          window.location.href = "/";
        } else {
          setIsChecking(false);
        }
      } catch (err) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏:", err);
        window.location.href = "/";
      }
    }

    checkAuth();
  }, []);

  // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –í–°–ï–• —Å–∏–ª–ª–∞–±—É—Å–æ–≤ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏
  useEffect(() => {
    const fetchSyllabi = async () => {
      try {
        const res = await fetch("/api/syllabus/list");
        if (res.ok) {
          const data = await res.json();
          setSyllabiList(data);
        }
      } catch (err) {
        console.error("‚ùå –•–∞—Ç–æ–∏ –±–æ—Ä–∫—É–Ω–∏–∏ —Ä”Ø–π—Ö–∞—Ç–∏ —Å–∏–ª–ª–∞–±—É—Å“≥–æ", err);
      }
    };
    fetchSyllabi();
  }, []);

  useEffect(() => {
    const filtered = teachers.filter((teacher) =>
      teacher.toLowerCase().includes(searchTerm.toLowerCase())
    );
    setFilteredTeachers(filtered);
  }, [searchTerm]);

  const handleFileChange = (teacher, event) => {
    const file = event.target.files[0];
    if (file) {
      setFiles((prev) => ({ ...prev, [teacher]: file }));
      setUploadStatus((prev) => ({ ...prev, [teacher]: "ready" }));
    }
  };

  const handleSubjectChange = (teacher, value) => {
    setSubjects((prev) => ({ ...prev, [teacher]: value }));
  };

  const handleUpload = async (teacher) => {
    const subject = subjects[teacher]?.trim();
    if (!subject) {
      alert("–õ—É—Ç—Ñ–∞–Ω, –Ω–æ–º–∏ —Ñ–∞–Ω —ë –≥—É—Ä”Ø“≥—Ä–æ –≤–æ—Ä–∏–¥ –∫—É–Ω–µ–¥!");
      return;
    }

    const file = files[teacher];
    if (!file) {
      setUploadStatus((prev) => ({ ...prev, [teacher]: "error" }));
      setTimeout(() => {
        setUploadStatus((prev) => {
          const newStatus = { ...prev };
          delete newStatus[teacher];
          return newStatus;
        });
      }, 3000);
      return;
    }

    setUploadStatus((prev) => ({ ...prev, [teacher]: "uploading" }));

    const formData = new FormData();
    formData.append("teacher", teacher);
    formData.append("subject", subject);
    formData.append("syllabus", file);

    try {
      const res = await fetch("/api/syllabus/upload", {
        method: "POST",
        body: formData,
      });

      if (res.ok) {
        setUploadStatus((prev) => ({ ...prev, [teacher]: "success" }));
        // –û—á–∏—Å—Ç–∫–∞ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
        setFiles((prev) => {
          const newFiles = { ...prev };
          delete newFiles[teacher];
          return newFiles;
        });
        setSubjects((prev) => {
          const newSubjects = { ...prev };
          delete newSubjects[teacher];
          return newSubjects;
        });
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫
        const updatedRes = await fetch("/api/syllabus/list");
        if (updatedRes.ok) {
          const updatedData = await updatedRes.json();
          setSyllabiList(updatedData);
        }
        setTimeout(() => {
          setUploadStatus((prev) => ({ ...prev, [teacher]: "" }));
        }, 3000);
      } else {
        const errorData = await res.json();
        alert(`–•–∞—Ç–æ: ${errorData.error || "–ù–æ–º–∞—ä–ª—É–º"}`);
        setUploadStatus((prev) => ({ ...prev, [teacher]: "error" }));
        setTimeout(() => {
          setUploadStatus((prev) => ({ ...prev, [teacher]: "" }));
        }, 3000);
      }
    } catch (err) {
      console.error(err);
      setUploadStatus((prev) => ({ ...prev, [teacher]: "error" }));
      setTimeout(() => {
        setUploadStatus((prev) => ({ ...prev, [teacher]: "" }));
      }, 3000);
    }
  };

  const handleDelete = async (id, teacher) => {
    if (!window.confirm(`–®—É–º–æ –º–µ—Ö–æ“≥–µ–¥, –∫–∏ –∏–Ω —Å–∏–ª–ª–∞–±—É—Å—Ä–æ –Ω–æ–±—É–¥ –∫—É–Ω–µ–¥?`)) {
      return;
    }

    try {
      const res = await fetch(`/api/syllabus/${id}`, {
        method: "DELETE",
      });

      if (res.ok) {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫
        const updatedRes = await fetch("/api/syllabus/list");
        if (updatedRes.ok) {
          const updatedData = await updatedRes.json();
          setSyllabiList(updatedData);
        }
      } else {
        const errorData = await res.json();
        alert(`–•–∞—Ç–æ: ${errorData.error || "–ù–æ–º–∞—ä–ª—É–º"}`);
      }
    } catch (err) {
      console.error(err);
      alert("–•–∞—Ç–æ–∏ —Å–µ—Ä–≤–µ—Ä “≥–∞–Ω–≥–æ–º–∏ –Ω–æ–±—É–¥–∫—É–Ω”£.");
    }
  };

  const getStatusIcon = (status) => {
    switch (status) {
      case "uploading":
        return "‚è≥";
      case "success":
        return "‚úÖ";
      case "error":
        return "‚ùå";
      case "ready":
        return "üìÅ";
      default:
        return "üìÑ";
    }
  };

  const getStatusText = (status) => {
    switch (status) {
      case "uploading":
        return "–ë–æ—Ä —à—É–¥–∞ –∏—Å—Ç–æ–¥–∞–∞—Å—Ç...";
      case "success":
        return "–ú—É–≤–∞—Ñ—Ñ–∞“õ!";
      case "error":
        return "–•–∞—Ç–æ!";
      case "ready":
        return "–§–∞–π–ª –∏–Ω—Ç–∏—Ö–æ–± —à—É–¥";
      default:
        return "–ò–Ω—Ç–∏—Ö–æ–±–∏ —Ñ–∞–π–ª";
    }
  };

  if (isChecking) {
    return (
      <div className="syllabus">
        <div className="syllabus__loader">
          <div className="syllabus__spinner"></div>
        </div>
      </div>
    );
  }

  return (
    <div className="syllabus-edit-full">
      <a href="/admin" className="admin-close-button">
        <X className="close-icon" />
      </a>

      <div className="syllabus-header">
        <div className="header-content">
          <h1 className="main-title">–ò–¥–æ—Ä–∞–∫—É–Ω–∏–∏ —Å–∏–ª–ª–∞–±—É—Å“≥–æ</h1>
          <p className="subtitle">–ë–æ—Ä–∫—É–Ω–∏–∏ –≤–∞ –Ω–æ–±—É–¥–∫—É–Ω–∏–∏ –±–∞—Ä–Ω–æ–º–∞“≥–æ–∏ —Ç–∞—ä–ª–∏–º”£</p>
        </div>

        <div className="search-section">
          <div className="search-container">
            <input
              type="text"
              placeholder="“∂—É—Å—Ç—É“∑”Ø–∏ –æ–º”Ø–∑–≥–æ—Ä..."
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
              className="search-input"
            />
            <span className="search-icon">üîç</span>
          </div>
          <div className="stats">
            <span className="stat-item">
              “≤–∞–º–∞–≥”£: <strong>{teachers.length}</strong>
            </span>
            <span className="stat-item">
              –Å—Ñ—Ç —à—É–¥: <strong>{filteredTeachers.length}</strong>
            </span>
            <span className="stat-item">
              –ë–æ—Ä –∫–∞—Ä–¥–∞ —à—É–¥–∞–∞—Å—Ç: <strong>{syllabiList.length}</strong>
            </span>
          </div>
        </div>
      </div>

      <div className="teachers-grid">
        {filteredTeachers.map((teacher, index) => {
          // –§–∏–ª—å—Ç—Ä—É–µ–º —Å–∏–ª–ª–∞–±—É—Å—ã —Ç–æ–ª—å–∫–æ —ç—Ç–æ–≥–æ —É—á–∏—Ç–µ–ª—è
          const teacherSyllabi = syllabiList.filter(
            (s) => s.teacherName === teacher
          );

          return (
            <div
              key={teacher}
              className="teacher-card"
              style={{ animationDelay: `${index * 0.05}s` }}
            >
              <div className="teacher-header">
                <div className="teacher-avatar">
                  {teacher.split(" ")[0][0]}
                  {teacher.split(" ")[1][0]}
                </div>
                <div className="teacher-info">
                  <h3 className="teacher-name">{teacher}</h3>
                  <span className="teacher-initials">
                    {teacher.split(" ")[1]} {teacher.split(" ")[0][0]}.
                  </span>
                </div>
                <div
                  className={`status-indicator ${
                    uploadStatus[teacher] || "default"
                  }`}
                >
                  {getStatusIcon(uploadStatus[teacher])}
                </div>
              </div>

              {/* –§–æ—Ä–º–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ù–û–í–û–ì–û —Å–∏–ª–ª–∞–±—É—Å–∞ */}
              <div className="file-upload-section">
                <input
                  type="text"
                  placeholder="–ù–æ–º–∏ —Ñ–∞–Ω —ë –≥—É—Ä”Ø“≥ (–º–∞—Å–∞–ª–∞–Ω: –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞ 101)"
                  value={subjects[teacher] || ""}
                  onChange={(e) => handleSubjectChange(teacher, e.target.value)}
                  className="subject-input"
                  style={{
                    width: "100%",
                    padding: "0.75rem",
                    marginBottom: "0.75rem",
                    borderRadius: "8px",
                    border: "1px solid #ddd",
                    fontSize: "0.9rem",
                  }}
                />

                <input
                  type="file"
                  accept=".pdf,.doc,.docx,.txt"
                  onChange={(e) => handleFileChange(teacher, e)}
                  className="file-input"
                  id={`file-${teacher}`}
                />

                <div className="file-info">
                  {files[teacher] && (
                    <div className="file-details">
                      <span className="file-name">{files[teacher].name}</span>
                      <span className="file-size">
                        ({(files[teacher].size / 1024 / 1024).toFixed(2)} –ú–ë)
                      </span>
                    </div>
                  )}
                </div>

                <div className="upload-controls">
                  <button
                    className="file-select-btn"
                    onClick={() =>
                      document.getElementById(`file-${teacher}`).click()
                    }
                  >
                    <span className="btn-icon">üìé</span>
                    {getStatusText(uploadStatus[teacher])}
                  </button>

                  <button
                    className={`upload-btn ${uploadStatus[teacher]}`}
                    onClick={() => handleUpload(teacher)}
                    disabled={uploadStatus[teacher] === "uploading"}
                  >
                    {uploadStatus[teacher] === "uploading" ? (
                      <>
                        <div className="spinner"></div>
                        –ë–æ—Ä —à—É–¥–∞ –∏—Å—Ç–æ–¥–∞–∞—Å—Ç...
                      </>
                    ) : (
                      <>
                        <span className="btn-icon">‚òÅÔ∏è</span>
                        –ë–æ—Ä–∫—É–Ω”£
                      </>
                    )}
                  </button>
                </div>
              </div>

              {/* –°–ø–∏—Å–æ–∫ –£–ñ–ï –ó–ê–ì–†–£–ñ–ï–ù–ù–´–• —Å–∏–ª–ª–∞–±—É—Å–æ–≤ */}
              {teacherSyllabi.length > 0 && (
                <div className="existing-syllabi">
                  <h4
                    style={{
                      margin: "1rem 0 0.5rem 0",
                      fontSize: "0.9rem",
                      color: "#6b7280",
                    }}
                  >
                    –ë–æ—Ä –∫–∞—Ä–¥–∞ —à—É–¥–∞–∞—Å—Ç ({teacherSyllabi.length}):
                  </h4>
                  {teacherSyllabi.map((syllabus) => (
                    <div
                      key={syllabus.id}
                      className="syllabus-item"
                      style={{
                        display: "flex",
                        justifyContent: "space-between",
                        alignItems: "center",
                        padding: "0.5rem 0",
                        borderBottom: "1px solid #eee",
                      }}
                    >
                      <span style={{ fontSize: "0.85rem", color: "#4b5563" }}>
                        {syllabus.subjectName}
                      </span>
                      <button
                        className="delete-mini-btn"
                        onClick={() => handleDelete(syllabus.id, teacher)}
                        style={{
                          background: "#fee2e2",
                          color: "#ef4444",
                          border: "none",
                          borderRadius: "4px",
                          padding: "0.25rem 0.5rem",
                          fontSize: "0.75rem",
                          cursor: "pointer",
                        }}
                      >
                        üóëÔ∏è –ù–æ–±—É–¥ –∫–∞—Ä–¥–∞–Ω
                      </button>
                    </div>
                  ))}
                </div>
              )}

              {uploadStatus[teacher] === "success" && (
                <div className="success-message">
                  ‚úÖ –°–∏–ª–ª–∞–±—É—Å –±–æ–º—É–≤–∞—Ñ—Ñ–∞“õ–∏—è—Ç –±–æ—Ä –∫–∞—Ä–¥–∞ —à—É–¥!
                </div>
              )}

              {uploadStatus[teacher] === "error" && (
                <div className="error-message">
                  ‚ùå –•–∞—Ç–æ–≥”£ “≥–∞–Ω–≥–æ–º–∏ –±–æ—Ä–∫—É–Ω”£. –ê–∑ –Ω–∞–≤ –∫”Ø—à–∏—à –∫—É–Ω–µ–¥.
                </div>
              )}
            </div>
          );
        })}
      </div>

      {filteredTeachers.length === 0 && (
        <div className="no-results">
          <div className="no-results-icon">üîç</div>
          <h3>–û–º”Ø–∑–≥–æ—Ä–æ–Ω —ë—Ñ—Ç –Ω–∞—à—É–¥–∞–Ω–¥</h3>
          <p>–î–∞—Ä—Ö–æ—Å—Ç–∏ “∑—É—Å—Ç—É“∑”Ø—Ä–æ —Ç–∞“ì–π–∏—Ä –¥–∏“≥–µ–¥</p>
        </div>
      )}
    </div>
  );
}
