const fs = require("fs");
const path = require("path");

// –°–∫—Ä–∏–ø—Ç –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∫–æ—Ä–Ω—è –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø–∞–ø–∫—É data
console.log("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö...");

const dataDir = path.join(__dirname, "data");
const uploadsDir = path.join(dataDir, "uploads");
const syllabiDir = path.join(uploadsDir, "syllabi");

// –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫–∏ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
if (!fs.existsSync(dataDir)) {
  fs.mkdirSync(dataDir, { recursive: true });
  console.log("‚úÖ –°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞ data");
}

if (!fs.existsSync(uploadsDir)) {
  fs.mkdirSync(uploadsDir, { recursive: true });
  console.log("‚úÖ –°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞ data/uploads");
}

if (!fs.existsSync(syllabiDir)) {
  fs.mkdirSync(syllabiDir, { recursive: true });
  console.log("‚úÖ –°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞ data/uploads/syllabi");
}

// –ú–∏–≥—Ä–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
const oldDbPath = path.join(__dirname, "posts.db");
const newDbPath = path.join(dataDir, "posts.db");

if (fs.existsSync(oldDbPath) && !fs.existsSync(newDbPath)) {
  fs.copyFileSync(oldDbPath, newDbPath);
  console.log("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö posts.db —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –≤ data/");
} else if (fs.existsSync(newDbPath)) {
  console.log("‚ÑπÔ∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ data/");
} else {
  console.log("‚ÑπÔ∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö posts.db –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –∫–æ—Ä–Ω–µ");
}

// –ú–∏–≥—Ä–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã uploads
const oldUploadsDir = path.join(__dirname, "uploads");
if (fs.existsSync(oldUploadsDir)) {
  const files = fs.readdirSync(oldUploadsDir);

  files.forEach((file) => {
    const oldFilePath = path.join(oldUploadsDir, file);
    const newFilePath = path.join(uploadsDir, file);

    if (fs.statSync(oldFilePath).isFile()) {
      if (!fs.existsSync(newFilePath)) {
        fs.copyFileSync(oldFilePath, newFilePath);
        console.log(`‚úÖ –§–∞–π–ª ${file} —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ data/uploads/`);
      } else {
        console.log(`‚ÑπÔ∏è –§–∞–π–ª ${file} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ data/uploads/`);
      }
    } else if (fs.statSync(oldFilePath).isDirectory()) {
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–¥–ø–∞–ø–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, syllabi)
      const subDirPath = path.join(uploadsDir, file);
      if (!fs.existsSync(subDirPath)) {
        fs.mkdirSync(subDirPath, { recursive: true });
      }

      const subFiles = fs.readdirSync(oldFilePath);
      subFiles.forEach((subFile) => {
        const oldSubFilePath = path.join(oldFilePath, subFile);
        const newSubFilePath = path.join(subDirPath, subFile);

        if (!fs.existsSync(newSubFilePath)) {
          fs.copyFileSync(oldSubFilePath, newSubFilePath);
          console.log(`‚úÖ –§–∞–π–ª ${file}/${subFile} —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ data/uploads/`);
        } else {
          console.log(
            `‚ÑπÔ∏è –§–∞–π–ª ${file}/${subFile} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ data/uploads/`
          );
        }
      });
    }
  });

  console.log("‚úÖ –í—Å–µ —Ñ–∞–π–ª—ã –∏–∑ uploads/ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã –≤ data/uploads/");
} else {
  console.log("‚ÑπÔ∏è –ü–∞–ø–∫–∞ uploads/ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –∫–æ—Ä–Ω–µ");
}

console.log("üéâ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!");
console.log("");
console.log("üìã –ß—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ:");
console.log("1. –°–æ–∑–¥–∞–π Volume –≤ Railway —Å mount path: /app/data");
console.log("2. –ó–∞–∫–æ–º–º–∏—Ç—å –∏ –∑–∞–ø—É—à—å –∏–∑–º–µ–Ω–µ–Ω–∏—è");
console.log("3. Railway –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥–∫–ª—é—á–∏—Ç Volume –∏ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω—è—Ç—Å—è");
